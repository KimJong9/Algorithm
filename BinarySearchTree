import random

class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def insertNode(root, value):
    if root is None:
        return TreeNode(value)
    if value < root.key:
        root.left = insertNode(root.left, value)
    else:
        root.right = insertNode(root.right, value)
    return root

def treeInsert(root, x):
    if root is None:
        return TreeNode(x)
    if x < root.key:
        root.left = treeInsert(root.left, x)
    else:
        root.right = treeInsert(root.right, x)
    return root

def treeDelete(root, r, parent=None):
    if r == root.key:
        return deleteNode(root)
    elif r < root.key:
        root.left = treeDelete(root.left, r, root)
    else:
        root.right = treeDelete(root.right, r, root)
    return root

def deleteNode(node):
    if node.left is None and node.right is None:
        return None
    elif node.left is None and node.right is not None:
        return node.right
    elif node.left is not None and node.right is None:
        return node.left
    else:
        s = node.right
        parent = node
        while s.left is not None:
            parent = s
            s = s.left
        node.key = s.key
        if s == node.right:
            node.right = s.right
        else:
            parent.left = s.right
        return node

def buildBinarySearchTree(arr):
    root = None
    for value in arr:
        root = insertNode(root, value)
    return root

# 랜덤으로 중복되지 않는 정수 20개 생성
numbers = random.sample(range(1, 101), 20)

# 이진 검색 트리 생성
root = buildBinarySearchTree(numbers)

import os
os.environ["PATH"] += os.pathsep + 'C:/Program Files/Graphviz/bin'  # Graphviz 설치 경로로 수정

import graphviz

def visualizeBinaryTree(root):
    dot = graphviz.Digraph()

    def traverse(node):
        if node is None:
            return

        dot.node(str(node.key))
        
        if node.left:
            dot.edge(str(node.key), str(node.left.key), label='L')
            traverse(node.left)
        
        if node.right:
            dot.edge(str(node.key), str(node.right.key), label='R')
            traverse(node.right)

    traverse(root)
    dot.render('binary_tree.gv', view=True)

# 이진 트리 시각화
visualizeBinaryTree(root)
